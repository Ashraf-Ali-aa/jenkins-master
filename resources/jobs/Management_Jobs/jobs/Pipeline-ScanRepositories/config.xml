<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.15">
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.41">
    <script>def githubApiUrl = &quot;${GITHUB_API_URL}&quot;
def organization = &quot;${GITHUB_ORGANIZATION}&quot;
def token = &quot;${GITHUB_OAUTH_TOKEN}&quot;

//echo &quot;githubApiUrl: ${githubApiUrl}&quot;
//echo &quot;organization: ${organization}&quot;
//echo &quot;token: ${token}&quot;

node() {
    stage(&quot;scan-repositories&quot;) {
        def response = httpRequest customHeaders: [[name: &apos;Authorization&apos;, \
            value: &quot;Basic ${token}&quot;]], \
            url: &quot;${githubApiUrl}orgs/${organization}/repos?per_page=250&quot;
    
        def repos = new groovy.json.JsonSlurper().parseText(response.getContent())
        //echo response.getContent()
        repos.each {
            def repoName = it.name
            echo it.ssh_url
            build job: &apos;Management_Jobs/ScanRepository&apos;, \
                parameters: [string(name: &apos;project&apos;, value: it.name), \
                string(name: &apos;branch&apos;, value: &apos;master&apos;)], \
                wait: false
        }
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>